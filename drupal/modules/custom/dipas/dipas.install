<?php

/**
 * @file
 * @license https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html GPL-2.0-or-later
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_schema().
 */
function dipas_schema() {

  $schema['dipas_keywords'] = [
    'description' => 'Table to store the text and the keywords of the dipas keyword service',
    'fields' => [
      'uid' => [
        'description' => 'the unique uid for the record',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'token' => [
        'description' => 'A token generated to identify the record later when updating.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'given_text' => [
        'description' => 'The text provided to the dipas keyword service.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'keywords' => [
        'description' => 'The keywors provided by the dipas keyword service for the given text.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'selected_keywords' => [
        'description' => 'The keywors selected by the user for the given text.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'request_duration' => [
        'description' => 'The duration of the request to the dipas keyword service in milliseconds.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'timeout' => [
        'description' => 'A timeout for validation of token build from now + 1 day.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'contribution_id' => [
        'description' => 'Contribution ID',
        'type' => 'int',
        'not null' => FALSE
        ],
    ],
    'indexes' => [
      'keyword_token' => ['token', 'timeout'],
    ],
    'primary key' => [
      'uid',
    ],
  ];

  $schema['dipas_cockpit_data'] = [
    'description' => 'Table to store the contributions and comments per month over all proceedings.',
    'fields' => [
        'dipas_cockpit_data_id' => [
          'description' => 'the unique id for the data',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'year' => [
          'description' => 'The year were the contribution or comment was entered',
          'type' => 'int',
          'not null' => TRUE,
        ],
        'month' => [
          'description' => 'The month were the contribution or comment was entered',
          'type' => 'int',
          'not null' => TRUE,
        ],
        'contributions' => [
          'description' => 'The count of the contribution were entered',
          'type' => 'int',
          'not null' => FALSE,
        ],
        'comments' => [
          'description' => 'The count were the comments were entered',
          'type' => 'int',
          'not null' => FALSE,
       ],
    ],
    'primary key' => [
      'dipas_cockpit_data_id',
    ],
  ];

  return $schema;

}

/**
 * Introducing an new table for dipas keyword service.
 */
function dipas_update_8101() {

  $spec = [
    'description' => 'Table to store the text and the keywords of the dipas keyword service',
    'fields' => [
      'uid' => [
        'description' => 'the unique uid for the record',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'token' => [
        'description' => 'A token generated to identify the record later when updating.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'given_text' => [
        'description' => 'The text provided to the dipas keyword service.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'keywords' => [
        'description' => 'The keywors provided by the dipas keyword service for the given text.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'selected_keywords' => [
        'description' => 'The keywors selected by the user for the given text.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'request_duration' => [
        'description' => 'The duration of the request to the dipas keyword service in milliseconds.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'timeout' => [
        'description' => 'A timeout for validation of token build from now + 1 day.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'indexes' => [
      'keyword_token' => ['token', 'timeout'],
    ],
    'primary key' => [
      'uid',
    ],
  ];

  $schema = Database::getConnection()->schema();
  $schema->createTable('dipas_keywords', $spec);
}

/**
 * Migrate geodata from GeoField to text field.
 */
function dipas_update_8102() {
  /* @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
  $entityTypeManager = \Drupal::getContainer()->get('entity_type.manager');
  /* @var \Drupal\Core\Entity\EntityStorageInterface $nodeStorage */
  $nodeStorage = $entityTypeManager->getStorage('node');

  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $nodeStorage->loadByProperties([
    'type' => 'contribution',
  ]);

  foreach ($nodes as $node) {
    $localization = $node->get('field_localization');
    if ($fieldValue = $localization->first()) {
      $geodata = [
        'type' => 'Point',
        'coordinates' => [
          $fieldValue->get('lon')->getValue(),
          $fieldValue->get('lat')->getValue(),
        ],
      ];
      $node->set('field_geodata', json_encode($geodata));
      $node->save();
    }
  }
}

/**
 * Create center points for existing geometries in field geodata.
 */
function dipas_update_8103() {
  /* @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
  $entityTypeManager = \Drupal::getContainer()->get('entity_type.manager');
  /* @var \Drupal\Core\Entity\EntityStorageInterface $nodeStorage */
  $nodeStorage = $entityTypeManager->getStorage('node');

  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $nodeStorage->loadByProperties([
    'type' => 'contribution',
  ]);

  foreach ($nodes as $node) {
    $geofield = $node->get('field_geodata');
    if (($fieldValue = $geofield->first()) && $fieldValue = json_decode($fieldValue->getString())) {

      if (empty($fieldValue->type)) {
        $geodata = $fieldValue;
      }

      switch ($fieldValue->type) {
        case 'Point':
          $geodata = [
            'geometry' => $fieldValue,
            'centerPoint' => $fieldValue,
          ];
          break;

        case 'LineString':
          $middleIndex = ceil(count($fieldValue->coordinates) / 2);
          $middleCoordinates = $fieldValue->coordinates[$middleIndex];
          $centerPoint = [
            'type' => 'Point',
            'coordinates' => $middleCoordinates,
          ];
          $geodata = [
            'geometry' => $fieldValue,
            'centerPoint' => $centerPoint,
          ];
          break;

        case 'Polygon':
          $coordsToCheck = $fieldValue->coordinates[0];

          $extent = [
            'lon_min' => 9999999999,
            'lat_min' => 9999999999,
            'lon_max' => 0,
            'lat_max' => 0,
          ];

          $latall = [];
          $lonall = [];

          /*
           * Copy all longitude coordinates in one and all latitude
           * coordinates in another array.
           */
          foreach ($coordsToCheck as $coordinate) {
            $lonall[] = $coordinate[0];
            $latall[] = $coordinate[1];
          }

          // Get the min and the max of both arrays.
          $extent = [
            'lon_min' => min($lonall),
            'lat_min' => min($latall),
            'lon_max' => max($lonall),
            'lat_max' => max($latall),
          ];

          $extent['lon_diff'] = $extent['lon_max'] - $extent['lon_min'];
          $extent['lon_avg'] = $extent['lon_min'] + $extent['lon_diff'] / 2;
          $extent['lat_diff'] = $extent['lat_max'] - $extent['lat_min'];
          $extent['lat_avg'] = $extent['lat_min'] + $extent['lat_diff'] / 2;

          $centerPoint = [
            'type' => 'Point',
            'coordinates' => [$extent['lon_avg'], $extent['lat_avg']],
          ];

          $geodata = [
            'geometry' => $fieldValue,
            'centerPoint' => $centerPoint,
          ];
      }

      $node->set('field_geodata', json_encode($geodata));
      $node->save();
    }
  }
}

/**
 * Add a new column contributionID for dipas keyword service.
 */
function dipas_update_8104() {
  $spec = [
    'type' => 'int',
    'description' => "Contribution ID",
    'not null' => FALSE,
  ];
  $schema = Database::getConnection()->schema();
  $schema->addField('dipas_keywords', 'contribution_id', $spec);
}

/**
 * Exceptionally remove of masterportal setting within dipas_update hook: Removing extent.
 *
 */
function dipas_update_8105() {
  $config_factory = \Drupal::configFactory();

  foreach ($config_factory->listAll('masterportal.instance.') as $masterportal_instance) {
    $config = $config_factory->getEditable($masterportal_instance);
    if ($config->get('settings') && $config->get('settings')['MapSettings'] && $config->get('settings')['MapSettings']['extent']) {
      $settings = $config->get('settings');
      unset($settings['MapSettings']['extent']);

      # remove entire object if empty
      if (count($settings['MapSettings']) === 0) {
        unset($settings['MapSettings']);
      }

      $config->set('settings', $settings);
      $config->save(TRUE);
    }
  }
}

/**
 * Remove overwriteFrontpage Tickbox from projectSchedule settings and check the box on MenuSettings if it was set
 *
 */
function dipas_update_8106() {
  $config_factory = \Drupal::configFactory();

  foreach ($config_factory->listAll('dipas.') as $dipas_config) {
    $config = $config_factory->getEditable($dipas_config);

    $settings = $config->get('ProjectSchedule');

    if ($settings && in_array('overwriteFrontpage', $settings)) {

      $settingsValue = $settings['overwriteFrontpage'];

      if ($config->get('MenuSettings') && $settingsValue) {
        $menuSettings = $config->get('MenuSettings');

        $menuSettings['mainmenu']['conceptionlist']['enabled'] = TRUE;
        $menuSettings['mainmenu']['conceptionlist']['name'] = 'Entwürfe Ansehen';
        $menuSettings['mainmenu']['conceptionlist']['icon'] = 'compare_arrows';
        $menuSettings['mainmenu']['conceptionlist']['overwriteFrontpage'] = $settingsValue;

        $config->set('MenuSettings', $menuSettings);

      }

      unset($settings['overwriteFrontpage']);
      $config->set('ProjectSchedule', $settings);
      $config->save(TRUE);
    }
  }
}

/**
 * Introducing a new table for DIPAS Cockpit
 */
function dipas_update_8107() {
  $spec = [
    'description' => 'Table to store the contributions and comments per month over all proceedings.',
    'fields' => [
        'dipas_cockpit_data_id' => [
          'description' => 'the unique id for the data',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'year' => [
          'description' => 'The year were the contribution or comment was entered',
          'type' => 'int',
          'not null' => TRUE,
        ],
        'month' => [
          'description' => 'The month were the contribution or comment was entered',
          'type' => 'int',
          'not null' => TRUE,
        ],
        'contributions' => [
          'description' => 'The count of the contribution were entered',
          'type' => 'int',
          'not null' => FALSE,
        ],
        'comments' => [
          'description' => 'The count were the comments were entered',
          'type' => 'int',
          'not null' => FALSE,
       ],
    ],
    'primary key' => [
      'dipas_cockpit_data_id',
    ],
  ];
  // Fetch the actual schema from the default database
  $schema = Database::getConnection()->schema();
  // CREATE TABLE dipas_cockpit_data
  $schema->createTable('dipas_cockpit_data', $spec);
}

/**
 * Calculating and adding centerpoints for project areas
 */
function dipas_update_8108() {
  $configNames = \Drupal::service('config.storage')->listAll('dipas.');
  $configNames = array_filter($configNames, function($item){return preg_match('~^dipas\..+?\.configuration$~i', $item) && $item !== 'dipas.default.configuration';});

  foreach ($configNames as $configFile) {
    $config = \Drupal::configFactory()->getEditable($configFile);

    $geodata = json_decode($config->get('ProjectArea')['project_area']);

    $boundingbox = [
      'xmin' => 9999999,
      'xmax' => 0,
      'ymin' => 9999999,
      'ymax' => 0,
    ];

    foreach($geodata->coordinates as $polygon) {
      foreach($polygon as $point) {
        if ($point[0] < $boundingbox['xmin']) {
          $boundingbox['xmin'] = $point[0];
        };

        if ($point[1] < $boundingbox['ymin']) {
          $boundingbox['ymin'] = $point[1];
        };

        if ($point[0] > $boundingbox['xmax']) {
          $boundingbox['xmax'] = $point[0];
        };

        if ($point[1] > $boundingbox['ymax']) {
          $boundingbox['ymax'] = $point[1];
        };
      }
    }

    $centerpoint = [
      $boundingbox['xmin'] + ($boundingbox['xmax'] - $boundingbox['xmin']) / 2,
      $boundingbox['ymin'] + ($boundingbox['ymax'] - $boundingbox['ymin']) / 2,
    ];

    $config->set('ProjectArea.project_area_centerpoint', implode(', ', $centerpoint));
    $config->save();
  }
}


/**
 * Migrate geodata from GeoField to text field for appointments.
 */
function dipas_update_9101() {
  /* @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
  $entityTypeManager = \Drupal::getContainer()->get('entity_type.manager');
  /* @var \Drupal\Core\Entity\EntityStorageInterface $nodeStorage */
  $nodeStorage = $entityTypeManager->getStorage('node');

  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = $nodeStorage->loadByProperties([
    'type' => 'appointment',
  ]);

  foreach ($nodes as $node) {
    $localization = $node->get('field_localization');
    if ($fieldValue = $localization->first()) {
      $geodata = [
        'geometry' => [
          'type' => 'Point',
          'coordinates' => [
            $fieldValue->get('lon')->getValue(),
            $fieldValue->get('lat')->getValue(),
          ]
        ],
        'centerPoint' => [
          'type' => 'Point',
          'coordinates' => [
            $fieldValue->get('lon')->getValue(),
            $fieldValue->get('lat')->getValue(),
          ]
        ],
      ];
      $node->set('field_geodata', json_encode($geodata));
      $node->save();
    }
  }
}
